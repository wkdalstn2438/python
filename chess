# 좌표 변환 유틸
def algebra_to_index(pos: str):
    file = pos[0].lower()
    rank = int(pos[1])
    x = ord(file) - ord('a')
    y = rank - 1
    return x, y

def index_to_algebra(x: int, y: int):
    return f"{chr(ord('a') + x)}{y + 1}"


class Piece:
    def __init__(self, color):
        self.color = color

    def symbol(self):
        raise NotImplementedError

    def valid_moves(self, board, x, y):
        raise NotImplementedError


class King(Piece):
    def symbol(self):
        return 'K' if self.color == 'white' else 'k'

    def valid_moves(self, board, x, y):
        directions = [(-1, -1), (-1, 0), (-1, 1),
                      (0,  -1),          (0,  1),
                      (1,  -1), (1,  0), (1,  1)]
        moves = []
        for dx, dy in directions:
            nx, ny = x + dx, y + dy
            if board.in_bounds(nx, ny):
                target = board.grid[nx][ny]
                if target is None or target.color != self.color:
                    moves.append((nx, ny))
        return moves


class Pawn(Piece):
    def symbol(self):
        return 'P' if self.color == 'white' else 'p'

    def valid_moves(self, board, x, y):
        moves = []
        direction = 1 if self.color == 'white' else -1
        start_row = 1 if self.color == 'white' else 6

        # 한 칸 전진
        if board.in_bounds(x, y + direction) and board.grid[x][y + direction] is None:
            moves.append((x, y + direction))

            # 첫 수일 때 두 칸 전진
            if y == start_row and board.grid[x][y + 2 * direction] is None:
                moves.append((x, y + 2 * direction))

        # 대각선 공격
        for dx in [-1, 1]:
            nx, ny = x + dx, y + direction
            if board.in_bounds(nx, ny):
                target = board.grid[nx][ny]
                if target and target.color != self.color:
                    moves.append((nx, ny))

        return moves


class Board:
    def __init__(self):
        self.grid = [[None for _ in range(8)] for _ in range(8)]
        self.setup()

    def setup(self):
        # 킹
        self.grid[4][0] = King('white')  # e1
        self.grid[4][7] = King('black')  # e8
        # 폰
        for i in range(8):
            self.grid[i][1] = Pawn('white')  # 2 rank
            self.grid[i][6] = Pawn('black')  # 7 rank

    def display(self):
        print("  a b c d e f g h")
        for y in reversed(range(8)):
            row = f"{y+1} "
            for x in range(8):
                piece = self.grid[x][y]
                row += piece.symbol() if piece else '.'
                row += ' '
            print(row)
        print()

    def in_bounds(self, x, y):
        return 0 <= x < 8 and 0 <= y < 8


class Game:
    def __init__(self):
        self.board = Board()
        self.turn = 'white'
        self.running = True

    def move(self, x1, y1, x2, y2):
        if not self.board.in_bounds(x1, y1) or not self.board.in_bounds(x2, y2):
            print("❌ Invalid coordinates")
            return

        piece = self.board.grid[x1][y1]
        if not piece:
            print("❌ No piece at start position")
            return
        if piece.color != self.turn:
            print("❌ Not your turn")
            return

        valid = piece.valid_moves(self.board, x1, y1)
        if (x2, y2) not in valid:
            print("❌ Invalid move for that piece")
            return

        target = self.board.grid[x2][y2]
        if isinstance(target, King):
            print(f"🏁 {self.turn} wins! {target.color} King captured.")
            self.running = False

        self.board.grid[x2][y2] = piece
        self.board.grid[x1][y1] = None
        self.turn = 'black' if self.turn == 'white' else 'white'

    def start(self):
        while self.running:
            self.board.display()
            print(f"{self.turn}'s turn. (e.g., e2 e4)")
            try:
                user_input = input("Move: ").strip()
                pos1, pos2 = user_input.split()
                x1, y1 = algebra_to_index(pos1)  # e -> 5
                x2, y2 = algebra_to_index(pos2)
                self.move(x1, y1, x2, y2)
            except Exception as e:
                print("❌ Invalid input format. Use format like 'e2 e4'")


# 실행
if __name__ == "__main__":
    Game().start()
