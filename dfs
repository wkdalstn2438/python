"""
def DFS(matrix, start_node):
    visit = [False] * len(matrix)
    stack = []
    stack.append(start_node)
    visit[start_node] = True
    print("방문", start_node)

    while stack:
        node = stack.pop()

        for next_node in range(len(matrix)):
            if matrix[node][next_node] == 1:
                if not visit[next_node]:
                    stack.append(next_node)
                    visit[next_node] = True
                    print("방문", next_node)


amatrix = [
    [0, 1, 1, 0, 0],
    [1, 0, 1, 1, 0],
    [1,1, 0, 0, 0],
    [0, 1, 0, 0, 1],
    [0, 0, 0, 1, 0]
]
DFS(amatrix, 0)
"""

def dfs(node, n, computers, visit):
    visit[node] = True
    for next_node in range(1):
        if not visit[next_node] and computers[node][next_node] == 1:
            dfs(next_node, n, computers, visit)

def solution(n, computers):
    answer = 0
    visit = [False] * n


    for node in range(n):
        if not visit[node]:
            dfs(node, n, computers, visit)
            answer += 1
    return answer
print(solution(5, [[1,1,1,0,0],[1,1,1,0,0],[1,1,1,0,0],[0,0,0,1,1],[0,0,0,1,1]]))
